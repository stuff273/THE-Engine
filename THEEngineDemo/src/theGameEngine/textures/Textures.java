package theGameEngine.textures;

import java.io.IOException;
import java.io.InputStream;

import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLES20;
import android.opengl.GLUtils;

public class Textures {
	
	
	public static Bitmap generateBitmap(String filename, AssetManager assets)
	{
		Bitmap bitmap = null;
		InputStream in = null;
		try
		{
			// Use assets to open a connection with the input stream
			in = assets.open(filename);
			
			// Decode the bitmap using standard Java methods
			bitmap = BitmapFactory.decodeStream(in);
		} 
		catch (IOException e)
		{
			throw new RuntimeException("Couldn't load texture "+filename, e);
		} 
		finally
		{
			if (in != null)
				try {in.close();} catch(IOException e){}
		}
		return bitmap;
	}
	
	public static float[] getBitmapPixelDimensions(Bitmap bitmap)
	{
		// float[] to return the texture dimensions (in pixels) generated by the program
        // textureDimensions[0] = Texture width (in pixels)
        // textureDimensions[1] = Texture height (in pixels)
        float[] texturePixelDimensions = new float[]{bitmap.getWidth(),bitmap.getHeight()};
        return texturePixelDimensions;
	}
	
	public static void generateAndBindTexture(Bitmap bitmap, int standardIntSlotValue, int textureMinifyingParam, int textureMagnifyingParam){
		if (standardIntSlotValue < 0 || standardIntSlotValue > 15)
			return;
		
		// int[] to hold the OpenGL generated texture (a lot like buffers)
		int[] generatedTexture = new int[1];
		
		// Generate an OpenGL texture
		// Parameters: (Number of texture to generate, int[] that will store generated texture, offset to start)
		GLES20.glGenTextures(1, generatedTexture, 0);
		
		//Set the active texture to the value passed in (ex. GLES20.GL_TEXTURE0, GLES20.GL_TEXTURE1)
		GLES20.glActiveTexture(getOpenGLTextureValue(standardIntSlotValue));
		
		//Bind the newly generated texture (Any change to a texture will now affect this bound texture)
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, generatedTexture[0]);
		
		//====================================================================================================
		// Set the single value texture parameters
		// GLES20.GL_NEAREST = OpenGL uses value that is nearest (Manhattan Distance) to specified texture coordinate - pixelated
		// GLES20.GL_LINEAR = OpenGL uses weighted average of all closed texture coordinates  - blurred
		
		//Set the GL_TEXTURE_MIN_FILTER to the value we passed in
		//	This is how OpenGL modifies the texture if it gets SMALLER
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, textureMinifyingParam);
		
		//Set the GL_TEXTURE_MAG_FILTER to the value we passed in
		//	This is how OpenGL modifies the texture if it gets BIGGER
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, textureMagnifyingParam);
        //====================================================================================================
        
        //Assign the bitmap to the currently bound texture
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);
	        
        //Recycle the bitmap
        bitmap.recycle();
	}
	
	private static int getOpenGLTextureValue(int standardIntTextureValue)
	{
		switch(standardIntTextureValue)
		{
		case(0):
			return GLES20.GL_TEXTURE0;
		case(1):
			return GLES20.GL_TEXTURE1;
		case(2):
			return GLES20.GL_TEXTURE2;
		case(3):
			return GLES20.GL_TEXTURE3;
		case(4):
			return GLES20.GL_TEXTURE4;
		case(5):
			return GLES20.GL_TEXTURE5;
		case(6):
			return GLES20.GL_TEXTURE6;
		case(7):
			return GLES20.GL_TEXTURE7;
		case(8):
			return GLES20.GL_TEXTURE8;
		case(9):
			return GLES20.GL_TEXTURE9;
		case(10):
			return GLES20.GL_TEXTURE10;
		case(11):
			return GLES20.GL_TEXTURE11;
		case(12):
			return GLES20.GL_TEXTURE12;
		case(13):
			return GLES20.GL_TEXTURE13;
		case(14):
			return GLES20.GL_TEXTURE14;
		case(15):
			return GLES20.GL_TEXTURE15;
		}
		
		return -1;
	}
	
}
